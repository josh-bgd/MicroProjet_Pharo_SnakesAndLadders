'From Pharo10.0.0 of 19 October 2022 [Build information: Pharo-10.0.0+build.533.sha.1264c724db69db4b887e08173cb286010ce413fb (64 Bit)] on 4 November 2022 at 5:17:45.963611 pm'!EzApp subclass: #EzMicroProjetApp	instanceVariableNames: 'snake fruit fruitBad grilSize score fruitGoodCollision fruitBadCollision gameOver snakeOrigin collisionSelf pressPlayImage up down left right gameOverYESImage gameOverNOImage ThanksImage sceneWidth sceneHeight downAllowed upAllowed rightAllowed leftAllowed wantRestart dontWantRestart'	classVariableNames: ''	package: 'EasyUI-Kernel'!!EzMicroProjetApp methodsFor: 'collisions' stamp: 'Josua 11/2/2022 16:23'!fruitBadCollision	fruitBad origin = (snake at: 1) origin ifTrue: [ 		fruitBadCollision := true ].	fruitBadCollision ifTrue: [ 				snake do: [ :square | drawingBoard remove: square ].				self removeSquare.				snake do: [ :square | drawingBoard add: square ].				drawingBoard remove: fruitBad.				fruitBadCollision := false.				self initFruitBad. "on régénère un nouveau fruit random"				drawingBoard add: fruitBad ]! !!EzMicroProjetApp methodsFor: 'collisions' stamp: 'Josua 11/3/2022 17:03'!fruitGoodCollision	fruit origin = (snake at: 1) origin ifTrue: [ 		fruitGoodCollision := true ].	fruitGoodCollision ifTrue: [ 		score := score + snake size.		snake do: [ :square | drawingBoard remove: square ].		self addSquare.		snake do: [ :square | drawingBoard add: square ].		drawingBoard remove: fruit.		fruitGoodCollision := false.		self initFruit. "on régénère un nouveau fruit random"		drawingBoard add: fruit ]! !!EzMicroProjetApp methodsFor: 'collisions' stamp: 'Josua 11/3/2022 11:26'!collisionSelf	snake allButFirst do: [ :square | 		square origin = snake first origin ifTrue: [ gameOver := true ] ].! !!EzMicroProjetApp methodsFor: 'moves' stamp: 'Josua 11/2/2022 16:18'!snakeMoveRight	| newOrigin oldOrigin deltaX  squareWidth |	squareWidth := sceneWidth / grilSize.	deltaX := squareWidth @ 0.	newOrigin := snake first origin.	(snake first origin + deltaX) x > sceneWidth		ifTrue: [ snake first origin: deltaX x / 2 @ snake first origin y ]		ifFalse: [ snake first origin: snake first origin + deltaX ].	snake allButFirst do: [ :square | 		oldOrigin := square origin.		square origin: newOrigin.		newOrigin := oldOrigin ]! !!EzMicroProjetApp methodsFor: 'moves' stamp: 'Josua 10/31/2022 19:38'!snakeMove	up ifTrue: [ self snakeMoveUp ].	down ifTrue: [ self snakeMoveDown ].	left ifTrue: [ self snakeMoveLeft ].	right ifTrue: [ self snakeMoveRight ]! !!EzMicroProjetApp methodsFor: 'moves' stamp: 'Josua 11/2/2022 16:18'!snakeMoveDown	| newOrigin oldOrigin deltaY  squareHeight |	squareHeight := sceneHeight / grilSize.	deltaY := 0 @ squareHeight.	newOrigin := snake first origin.	(snake first origin + deltaY) y > sceneHeight		ifTrue: [ snake first origin: snake first origin x @ (deltaY y / 2) ]		ifFalse: [ snake first origin: snake first origin + deltaY ].	snake allButFirst do: [ :square | 		oldOrigin := square origin.		square origin: newOrigin.		newOrigin := oldOrigin ]! !!EzMicroProjetApp methodsFor: 'moves' stamp: 'Josua 11/2/2022 16:18'!snakeMoveLeft	| newOrigin oldOrigin deltaX  squareWidth |	squareWidth := sceneWidth / grilSize.	deltaX := squareWidth @ 0.	newOrigin := snake first origin.	(snake first origin - deltaX) x < 0		ifTrue: [ 			snake first origin:				sceneWidth - (deltaX x / 2) @ snake first origin y ]		ifFalse: [ snake first origin: snake first origin - deltaX ].	snake allButFirst do: [ :square | 		oldOrigin := square origin.		square origin: newOrigin.		newOrigin := oldOrigin ]! !!EzMicroProjetApp methodsFor: 'moves' stamp: 'Josua 11/2/2022 16:19'!snakeMoveUp	| newOrigin oldOrigin deltaY squareHeight |	squareHeight := sceneHeight / grilSize.	deltaY := 0 @ squareHeight.	newOrigin := snake first origin.	(snake first origin - deltaY) y < 0		ifTrue: [ 			snake first origin:				snake first origin x + (deltaY y / 2) @ sceneHeight				- (deltaY y / 2) ]		ifFalse: [ snake first origin: snake first origin - deltaY ].	snake allButFirst do: [ :square | 		oldOrigin := square origin.		square origin: newOrigin.		newOrigin := oldOrigin ]! !!EzMicroProjetApp methodsFor: 'setter' stamp: 'Josua 11/2/2022 15:41'!grilSize: aSize	grilSize := aSize.	! !!EzMicroProjetApp methodsFor: 'game' stamp: 'Josua 11/3/2022 18:12'!gameRestart	up := false.	down := false.	left := false.	right := true.	upAllowed := true.	downAllowed := true.	leftAllowed := false.	rightAllowed := false.	fruitGoodCollision := false.	fruitBadCollision := false.	collisionSelf := false.	score:= 0.	gameOver := false! !!EzMicroProjetApp methodsFor: 'game' stamp: 'Josua 11/3/2022 11:27'!gameOver	collisionSelf ifTrue: [ gameOver :=true ]! !!EzMicroProjetApp methodsFor: 'game' stamp: 'Josua 11/3/2022 11:30'!gamePlay	self snakeMove.	self collisionSelf.	self fruitGoodCollision. "ici on regarde si y'a une collision avec un fruit ou non"	self fruitBadCollision "ici on regarde si y'a une collision avec un fruitBad ou non"! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/2/2022 19:17'!initMap 		| indicePair indiceImpair square |	indicePair := 2. "toutes les lignes paires"	grilSize // 2 timesRepeat: [ 		indiceImpair := 1.		grilSize // 2 timesRepeat: [ 			square := EzBox				          rectangleCorner: indiceImpair * (sceneWidth / grilSize)					          @ (sceneHeight - (indicePair * sceneHeight / grilSize))				          width: sceneWidth / grilSize				          height: sceneHeight / grilSize.			square fillColor: Color white.			square borderColor: Color gray.			drawingBoard add: square.			indiceImpair := indiceImpair + 2 ].		indicePair := indicePair + 2 ].	indiceImpair := 1. "toutes les lignes impaires"	grilSize timesRepeat: [ 		indicePair := 0.		grilSize // 2 + 1 timesRepeat: [ 			square := EzBox				          rectangleCorner: indicePair * (sceneWidth / grilSize)					          @					          (sceneHeight - (indiceImpair * sceneHeight / grilSize))				          width: sceneWidth / grilSize				          height: sceneHeight / grilSize.			square fillColor: Color white.			square borderColor: Color gray.			drawingBoard add: square.			indicePair := indicePair + 2 ].		indiceImpair := indiceImpair + 2 ]! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/2/2022 15:52'!initFruitBad	| middleGril fruitPositionY fruitPositionX |	middleGril := grilSize // 2 + 1.	fruitPositionX := (0 to: grilSize - 1) atRandom * sceneWidth	                  / grilSize. "je génère un abscisse random pour la position du fruit"	fruitPositionY := (0 to: grilSize - 1) atRandom * sceneHeight	                  / grilSize. "je génère une ordonnée random pour la position du fruit"	fruitBad := EzBox		            rectangleCorner: fruitPositionX @ fruitPositionY		            width: sceneWidth / grilSize		            height: sceneHeight / grilSize. "creation du snake"	fruitBad fillColor: Color red.	fruitBad borderColor: Color white! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/3/2022 11:53'!initSnake	| deltaX deltaY middleGril snakeBox |	snake := OrderedCollection new.	middleGril := grilSize // 2 + 1.	deltaX := sceneWidth / grilSize @ 0.	deltaY := 0 @ sceneHeight / grilSize.	snakeOrigin := sceneWidth - (middleGril * (sceneWidth / grilSize))	               @	               (sceneHeight - (middleGril * sceneHeight / grilSize)).	snakeBox := EzBox		            rectangleCorner: snakeOrigin		            width: sceneWidth / grilSize		            height: sceneHeight / grilSize. "creation du snake"	snakeBox fillColor: Color blue.	snakeBox borderColor: Color blue.	self snake: snakeBox.	[ 	720 timesRepeat: [ "maximum 3min de partie"		self gameOver.		gameOver ifFalse: [ 			self gamePlay.			gameOver ifTrue: [ 				drawingBoard removeAll: { 						fruit.						fruitBad }.				snake do: [ :square | drawingBoard remove: square ].				drawingBoard add: gameOverYESImage.				wantRestart := true ].			(Delay forMilliseconds: 250 - (4 * snake size)) wait.			self buttonArrowLeft.			self buttonArrowRight.			self buttonArrowDown.			self buttonArrowUp ] ].	Processor yield ] fork! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/3/2022 16:49'!defaultTitle	^ 'Snake Game (left/right/Up/Down arrows - Start with Space)'! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/2/2022 19:00'!initFruit	| middleGril fruitPositionY fruitPositionX |	middleGril := grilSize // 2 + 1.	fruitPositionX := (0 to: grilSize - 1) atRandom * sceneWidth	                  / grilSize. "je génère un abscisse random pour la position du fruit"	fruitPositionY := (0 to: grilSize - 1) atRandom * sceneHeight	                  / grilSize. "je génère une ordonnée random pour la position du fruit"	fruit := EzBox		         rectangleCorner: fruitPositionX @ fruitPositionY		         width: sceneWidth / grilSize		         height: sceneHeight / grilSize. "creation du snake"	fruit fillColor: Color green.	fruit borderColor: Color white! !!EzMicroProjetApp methodsFor: 'initialization' stamp: 'Josua 11/3/2022 11:36'!initialize	| cheminPressPlay cheminGameOver1 cheminGameOver2 cheminThanks |	super initialize.	self grilSize: 17.	score:=0.	up := false.	down := false.	left := false.	right := true.	upAllowed := true.	downAllowed := true.	leftAllowed := false.	rightAllowed := false.	fruitGoodCollision := false.	fruitBadCollision := false.	collisionSelf := false.	gameOver := true.	wantRestart := false.	dontWantRestart := false.	sceneHeight := drawingBoard height.	sceneWidth := drawingBoard width.	sceneHeight := drawingBoard height.	sceneWidth := drawingBoard width.	drawingBoard backgroundPaint: Color white.	cheminPressPlay := (Smalltalk imageDirectory / 'pressPlay.jpg')		                   pathString.	pressPlayImage := EzImageDrawing imageFilePath: cheminPressPlay.	pressPlayImage origin: 189 @ 355.	cheminGameOver1 := (Smalltalk imageDirectory / 'gameOverImageYES.png')		                   pathString.	gameOverYESImage := EzImageDrawing imageFilePath: cheminGameOver1.	gameOverYESImage origin: 0 @ 173.	cheminGameOver2 := (Smalltalk imageDirectory / 'gameOverImageNO.png')		                   pathString.	gameOverNOImage := EzImageDrawing imageFilePath: cheminGameOver2.	gameOverNOImage origin: 0 @ 173.	self initMap.	self grilSize: 17.	sceneHeight := drawingBoard height.	sceneWidth := drawingBoard width.	drawingBoard backgroundPaint: Color white.	cheminPressPlay := (Smalltalk imageDirectory / 'pressPlay.jpg')		                   pathString.	pressPlayImage := EzImageDrawing imageFilePath: cheminPressPlay.	pressPlayImage origin: 189 @ 355.	cheminThanks := (Smalltalk imageDirectory / 'Thanks.png') pathString.	ThanksImage := EzImageDrawing imageFilePath: cheminThanks.	ThanksImage origin: 210 @ 295.	drawingBoard add: pressPlayImage.	self buttonSpace! !!EzMicroProjetApp methodsFor: 'actions' stamp: 'Josua 11/3/2022 10:52'!buttonArrowRight	drawingBoard		bindKeyCombination: Character arrowRight asKeyCombination		toAction: [ 			rightAllowed ifTrue: [ 				right := true.				left := false.				up := false.				down := false.				upAllowed := true.				downAllowed := true.				leftAllowed := false ].			gameOver & (wantRestart | dontWantRestart) ifTrue: [ 				drawingBoard remove: gameOverYESImage.				wantRestart := false.				drawingBoard add: gameOverNOImage.				dontWantRestart := true ] ]! !!EzMicroProjetApp methodsFor: 'actions' stamp: 'Josua 11/3/2022 10:53'!buttonArrowLeft	drawingBoard		bindKeyCombination: Character arrowLeft asKeyCombination		toAction: [ 			leftAllowed ifTrue: [ 				right := false.				left := true.				up := false.				down := false.				upAllowed := true.				downAllowed := true.				rightAllowed := false ].			gameOver & (wantRestart | dontWantRestart)ifTrue: [ 				drawingBoard remove: gameOverNOImage.				dontWantRestart := false.				drawingBoard add: gameOverYESImage.				wantRestart := true ] ]! !!EzMicroProjetApp methodsFor: 'actions' stamp: 'Josua 11/2/2022 15:48'!buttonArrowUp	drawingBoard		bindKeyCombination: Character arrowUp asKeyCombination		toAction: [ 			upAllowed ifTrue: [ 				right := false.				left := false.				up := true.				down := false.				leftAllowed := true.				rightAllowed := true.				downAllowed := false ] ]! !!EzMicroProjetApp methodsFor: 'actions' stamp: 'Josua 11/3/2022 10:57'!buttonSpace	drawingBoard		bindKeyCombination: Character space asKeyCombination		toAction: [ 			(drawingBoard drawings includes: pressPlayImage) ifTrue: [ 				gameOver := false.				drawingBoard remove: pressPlayImage.				self initSnake.				self initFruit.				self initFruitBad.				drawingBoard addAll: { 						fruit.						fruitBad }.				snake do: [ :snakeBox | drawingBoard add: snakeBox ].				self gameRestart ].			wantRestart & gameOver ifTrue: [ 				wantRestart := false.				gameOver := false.				drawingBoard remove: pressPlayImage.				self initSnake.				drawingBoard addAll: { 						fruit.						fruitBad }.				snake do: [ :snakeBox | drawingBoard add: snakeBox ].				drawingBoard remove: gameOverYESImage.				self gameRestart ].			dontWantRestart & gameOver ifTrue: [ 				dontWantRestart := false.				drawingBoard remove: gameOverNOImage.				drawingBoard add: ThanksImage ] ]! !!EzMicroProjetApp methodsFor: 'actions' stamp: 'Josua 11/2/2022 19:01'!buttonArrowDown	drawingBoard		bindKeyCombination: Character arrowDown asKeyCombination		toAction: [ 			downAllowed ifTrue: [ 				right := false.				left := false.				up := false.				down := true.				upAllowed := false.				rightAllowed := true.				leftAllowed := true ] ]! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 16:28'!addSquareRight	|  square squareOriginX squareOriginY squareSize |	squareSize := sceneHeight / grilSize.	squareOriginX := snake last origin x - (3 * squareSize / 2).	squareOriginY := snake last origin y - (squareSize / 2).	square := EzBox		          rectangleCorner: squareOriginX @ squareOriginY		          width: sceneWidth / grilSize		          height: sceneHeight / grilSize. "creation du snake"	square fillColor: Color blue.	square borderColor: Color white.	self snake: square! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 16:29'!addSquare	up ifTrue: [ self addSquareUp ].	down ifTrue: [ self addSquareDown ].	right ifTrue: [ self addSquareRight ].	left ifTrue: [ self addSquareLeft ]! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 21:26'!removeSquare	snake size = 1		ifTrue: [ 			gameOver := true.]		ifFalse: [ snake remove: snake last ]! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 15:48'!snake: aSquare	snake add: aSquare! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 16:29'!addSquareLeft	|  square squareOriginX squareOriginY squareSize |	squareSize := sceneHeight / grilSize.	squareOriginX := snake last origin x + (squareSize / 2).	squareOriginY := snake last origin y - (squareSize / 2).	square := EzBox		          rectangleCorner: squareOriginX @ squareOriginY		          width: sceneWidth / grilSize		          height: sceneHeight / grilSize. "creation du snake"	square fillColor: Color blue.	square borderColor: Color white.	self snake: square! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 16:29'!addSquareDown	|  square squareOriginX squareOriginY squareSize |	squareSize := sceneHeight / grilSize.	squareOriginX := snake last origin x - (squareSize / 2).	squareOriginY := snake last origin y - (3 * squareSize / 2).	square := EzBox		          rectangleCorner: squareOriginX @ squareOriginY		          width: sceneWidth / grilSize		          height: sceneHeight / grilSize. "creation du snake"	square fillColor: Color blue.	square borderColor: Color white.	self snake: square! !!EzMicroProjetApp methodsFor: 'squares' stamp: 'Josua 11/2/2022 16:30'!addSquareUp	|square squareOriginX squareOriginY squareSize |	squareSize := sceneHeight / grilSize.	squareOriginX := snake last origin x - (squareSize / 2).	squareOriginY := snake last origin y + (squareSize / 2).	square := EzBox		          rectangleCorner: squareOriginX @ squareOriginY		          width: sceneWidth / grilSize		          height: sceneHeight / grilSize. "creation du snake"	square fillColor: Color blue.	square borderColor: Color white.	self snake: square! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EzMicroProjetApp class	instanceVariableNames: ''!!EzMicroProjetApp class methodsFor: 'examples' stamp: 'Josua 10/28/2022 16:12'!demo	<example>	self newOpenWindow! !